Multivariate_Gauss_PDF <- function(x,mu,sigma){
k = length(mu)
constant=(2*pi)^(-k/2)*(det(sigma)^(-.5))
x_minus_mu = c((x-mu)[1,1] ,(x-mu)[1,2] );
constant*(-.5*(x_minus_mu)%*%solve(sigma)%*%(x_minus_mu))
}
Estep <- function(data, G, para){
# Your Code
# Return the n-by-G probability matrix
solution = matrix(0, nrow(data), G)
for(i in 1:nrow(data)){
a =  para$prob[1]*Multivariate_Gauss_PDF(data[i,],para$mean[,1],para$Sigma );
b = para$prob[2]*Multivariate_Gauss_PDF(data[i,],para$mean[,2],para$Sigma );
solution[i,1] = a / (a + b)
solution[i,2] = 1 - solution[i,1]
}
return(solution)
}
Mstep <- function(data, G, para, post.prob){
# Your Code
# Return the updated parameters
}
loglik <- function(data, G, para){
# compute loglikelihood
}
myEM <- function(data, itmax, G, para){
# itmax: number of of iterations
# G:     number of components
# para:  list of (prob, mean, Sigma, loglik)
for(t in 1:itmax){
post.prob <- Estep(data, G, para)
para <- Mstep(data, G, para, post.prob)
}
# update para$loglik
para$loglik <- loglik(data, G, para)
return(para)
}
options(digits=8)
options()$digits
library(mclust)
faithful<- read.table("data/faithful.dat", header = T)
print(dim(faithful))
head(faithful)
n <- nrow(faithful)
G <- 2
set.seed(234)  # replace 234 by the last 4-dig of your University ID
gID <- sample(1:G, n, replace = TRUE)
Z <- matrix(0, n, G)
for(k in 1:G)
Z[gID == k, k] <- 1
ini0 <- mstep(modelName="EEE", faithful , Z)$parameters
para0 <- list(prob = ini0$pro,
mean = ini0$mean,
Sigma = ini0$variance$Sigma,
loglik = NULL)
para0
myEM(data=faithful, itmax=20, G=K, para=para0)
Multivariate_Gauss_PDF <- function(x,mu,sigma){
k = length(mu)
constant=(2*pi)^(-k/2)*(det(sigma)^(-.5))
x_minus_mu = c((x-mu)[1,1] ,(x-mu)[1,2] );
constant*(-.5*(x_minus_mu)%*%solve(sigma)%*%(x_minus_mu))
}
Estep <- function(data, G, para){
# Your Code
# Return the n-by-G probability matrix
solution = matrix(0, nrow(data), G)
for(i in 1:nrow(data)){
a =  para$prob[1]*Multivariate_Gauss_PDF(data[i,],para$mean[,1],para$Sigma );
b = para$prob[2]*Multivariate_Gauss_PDF(data[i,],para$mean[,2],para$Sigma );
solution[i,1] = a / (a + b)
solution[i,2] = 1 - solution[i,1]
}
return(solution)
}
Mstep <- function(data, G, para, post.prob){
# Your Code
# Return the updated parameters
n = nrow(data)
gamma_plus = colSums(post.prob)
for(k in 1:G) {
para$mean[,k] = t(data) %*% post.prob[,k]  / gamma_plus[k]
}
S = matrix(0,G,G)
for(i in 1:n) {
for(k in 1:G){
x =c()
mu = c()
for (l in 1:dim(data[1,])[2]){
x = c(x,data[i,l])
mu = c(mu,as.numeric(para$mean[l,k]))
}
S = S + post.prob[i,k] * outer(x - mu, x - mu)
}
}
para$Sigma = S/n
para$prob = gamma_plus / n
return(para)
}
loglik <- function(data, G, para){
# compute loglikelihood
}
myEM <- function(data, itmax, G, para){
# itmax: number of of iterations
# G:     number of components
# para:  list of (prob, mean, Sigma, loglik)
for(t in 1:itmax){
post.prob <- Estep(data, G, para)
para <- Mstep(data, G, para, post.prob)
}
# update para$loglik
para$loglik <- loglik(data, G, para)
return(para)
}
options(digits=8)
options()$digits
library(mclust)
faithful<- read.table("data/faithful.dat", header = T)
print(dim(faithful))
head(faithful)
n <- nrow(faithful)
G <- 2
set.seed(234)  # replace 234 by the last 4-dig of your University ID
gID <- sample(1:G, n, replace = TRUE)
Z <- matrix(0, n, G)
for(k in 1:G)
Z[gID == k, k] <- 1
ini0 <- mstep(modelName="EEE", faithful , Z)$parameters
para0 <- list(prob = ini0$pro,
mean = ini0$mean,
Sigma = ini0$variance$Sigma,
loglik = NULL)
para0
myEM(data=faithful, itmax=20, G=G, para=para0)
Rout <- em(modelName = "EEE", data = faithful,
control = emControl(eps=0, tol=0, itmax = 20),
parameters = ini0)
list(prob = Rout$para$pro, mean = Rout$para$mean,
Sigma = Rout$para$variance$Sigma,
loglik = Rout$loglik)
install.packages("mvtnorm")
x_minus_mu
Multivariate_Gauss_PDF <- function(x,mu,sigma){
k = length(mu)
constant=(2*pi)^(-k/2)*(det(sigma)^(-.5))
x_minus_mu = c((x-mu)[1,1] ,(x-mu)[1,2] );
print(x_minus_mu)
constant*(-.5*(x_minus_mu)%*%solve(sigma)%*%(x_minus_mu))
}
Estep <- function(data, G, para){
# Your Code
# Return the n-by-G probability matrix
solution = matrix(0, nrow(data), G)
for(i in 1:nrow(data)){
a =  para$prob[1]*Multivariate_Gauss_PDF(data[i,],para$mean[,1],para$Sigma );
b = para$prob[2]*Multivariate_Gauss_PDF(data[i,],para$mean[,2],para$Sigma );
solution[i,1] = a / (a + b)
solution[i,2] = 1 - solution[i,1]
}
return(solution)
}
Mstep <- function(data, G, para, post.prob){
# Your Code
# Return the updated parameters
n = nrow(data)
gamma_plus = colSums(post.prob)
for(k in 1:G) {
para$mean[,k] = t(data) %*% post.prob[,k]  / gamma_plus[k]
}
S = matrix(0,G,G)
for(i in 1:n) {
for(k in 1:G){
x =c()
mu = c()
for (l in 1:dim(data[1,])[2]){
x = c(x,data[i,l])
mu = c(mu,as.numeric(para$mean[l,k]))
}
S = S + post.prob[i,k] * outer(x - mu, x - mu)
}
}
para$Sigma = S/n
para$prob = gamma_plus / n
return(para)
}
loglik <- function(data, G, para){
# compute loglikelihood
}
myEM <- function(data, itmax, G, para){
# itmax: number of of iterations
# G:     number of components
# para:  list of (prob, mean, Sigma, loglik)
for(t in 1:itmax){
post.prob <- Estep(data, G, para)
para <- Mstep(data, G, para, post.prob)
}
# update para$loglik
para$loglik <- loglik(data, G, para)
return(para)
}
